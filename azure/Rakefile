require 'json'

def expand_env(str)
  str.gsub(/\$([a-zA-Z_][a-zA-Z0-9_]*)|\${\g<1>}|%\g<1>%/) { ENV[$1] }
end

account = "camptek"
label = "camptek"
region = "eastus"

required_vars = %w[
  ARM_CLIENT_ID
  ARM_CLIENT_SECRET
  ARM_SUBSCRIPTION_ID
  ARM_TENANT_ID
]

required_files = %w[
  $HOME/.terraformrc
]

task :verify do
  required_files.each do |fname|
    filename = expand_env(fname)
    puts "Verifying file #{filename}"
    raise "Missing required file #{filename}" unless File.file?(filename)
  end

  required_vars.each do |evar|
    puts "Checking ENVVAR #{evar}"
    raise "Missing required environment variable #{evar}" unless ENV[evar]
  end

  azversion = JSON.parse(`az version --output json`)
  azcliversion = azversion['azure-cli']

  puts "Azure Cli #{azcliversion}"
end

task init: :verify do
  sh %( terraform init )
end

task plan: :verify do
  sh %( terraform plan -var-file="user_vars.auto.tfvars" -var-file="overrides.tfvars" )
end

task apply: :verify do
  sh %( terraform apply -var-file="user_vars.auto.tfvars" -var-file="overrides.tfvars" )
end

task destroy: :verify do
  sh %( terraform destroy -var-file="user_vars.auto.tfvars" -var-file="overrides.tfvars" )
end

task credentials: :verify do
  sh %( az aks get-credentials --name #{label} --resource-group #{label}-#{region} --admin -f #{ENV['KUBECONFIG']} )
end

task initialize: :verify do
  sh %( az group create --location #{region} --name #{label}-common )
  sh %( az storage account create --name #{account}snapshots --resource-group #{label}-common )
end


