require 'json'
require 'ostruct'

vars = OpenStruct.new

def expand_env(str)
  str.gsub(/\$([a-zA-Z_][a-zA-Z0-9_]*)|\${\g<1>}|%\g<1>%/) { ENV[$1] }
end


required_vars = %w[
  ARM_CLIENT_ID
  ARM_CLIENT_SECRET
  ARM_SUBSCRIPTION_ID
  ARM_TENANT_ID
  OCR_LICENSE_KEY
]

required_files = %w[
  $HOME/.terraformrc
]


task :verify do
  required_files.each do |fname|
    filename = expand_env(fname)
    puts "Verifying file #{filename}"
    raise "Missing required file #{filename}" unless File.file?(filename)
  end

  required_vars.each do |evar|
    puts "Checking ENVVAR #{evar}"
    raise "Missing required environment variable #{evar}" unless ENV[evar]
  end

  azversion = JSON.parse(`az version --output json`)
  azcliversion = azversion['azure-cli']

  puts "Azure Cli #{azcliversion}"

  variables = {}
  IO.foreach('overrides.tfvars') do |rawline| 
    line = rawline.strip
    next if line.start_with?('#') or line.nil? or line.empty?
    
    # You might be able to use split or something to get attributes
    atts = line.split
    var_name = atts[0]
    var_value = atts[2]

    #puts("setting #{var_name} to #{var_value}")
    variables[atts[0]] = eval("#{var_name}=#{var_value}")
   
  end

  vars = OpenStruct.new(variables)

end

task init: :verify do
  sh %( terraform init )
end

task plan: :verify do
  sh %( terraform plan -var-file="user_vars.auto.tfvars" -var-file="overrides.tfvars" )
end

task apply: :verify do
  sh %( terraform apply -var-file="user_vars.auto.tfvars" -var-file="overrides.tfvars" )
end

task destroy: :verify do
  sh %( helm uninstall ipa )
  sh %( terraform destroy -var-file="user_vars.auto.tfvars" -var-file="overrides.tfvars" )
end

task credentials: :verify do
  sh %( az aks get-credentials --name #{vars.label} --resource-group #{vars.label}-#{vars.region} --admin -f #{ENV['KUBECONFIG']} )
end

task initialize: :verify do
  sh %( az group create --location #{vars.region} --name #{vars.label}-common )
  sh %( az storage account create --name #{vars.account}snapshots --resource-group #{vars.label}-common )
end

task ipa: :verify do
  ipa = <<HEREDOC
global:
  appDomains: [#{vars.label}.#{vars.region}.#{vars.account}.#{vars.domain_suffix}]
  secretRefs:
    - indico-generated-secrets
    - indico-static-secrets
    - rabbitmq
    - azure-storage-key
rabbitmq:
  enabled: true
secrets:
  ocr_license_key: #{ENV['OCR_LICENSE_KEY']}
configs:
  allowed_origins: ALLOW_ALL
  postgres:
    app:
      user: indico
    metrics:
      user: indico
  storage:
    blob:
      s3:
      azure:
        account: #{vars.label}#{vars.region}
        key: ''
        container: blob
        prefix: ''
  extraIndicoConfigs:
    DEFAULT_OCR_ENGINE: omnipage
    OCR_ENGINES: readapi, omnipage
worker:
  serviceAccountName: workload-identity-storage-account
  services:
    acord-workflow:
      enabled: true
    formextraction:
      enabled: true
    glove-v1:
      enabled: true
    imagefeatures-v2:
      enabled: true
    objectdetection-predict:
      enabled: true
    objectdetection-train:
      enabled: true
    vdp:
      enabled: true
server:
  serviceAccountName: workload-identity-storage-account
  services:
    restapi-proxy:
      enabled: true
faust-worker:
  serviceAccountName: workload-identity-storage-account
rainbow-nginx:
  serviceAccountName: workload-identity-storage-account
app-edge:
  frontend:
    config:
      features:
        galleryEnabled: true
authSettings:
  manageAllData: 'True'
readapi:
  enabled: false
cronjob:
  services:
    storage-cleanup:
      enabled: true
HEREDOC

  File.write('ipa.yaml', ipa)
  puts("helm repo add indico https://harbor.devops.indico.io/chartrepo/indico-charts")
  puts("helm upgrade --install ipa indico/ipa --version #{vars.ipa_version} -f ipa.yaml")
end



