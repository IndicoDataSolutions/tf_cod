require 'json'
require 'ostruct'

vars = {}

def expand_env(str)
  str.gsub(/\$([a-zA-Z_][a-zA-Z0-9_]*)|\${\g<1>}|%\g<1>%/) { ENV[$1] }
end

required_vars = %w[
  ARM_CLIENT_ID
  ARM_CLIENT_SECRET
  ARM_SUBSCRIPTION_ID
  ARM_TENANT_ID
  OCR_LICENSE_KEY
]

required_files = %w[
  $HOME/.terraformrc
  overrides.tfvars
]

task :setup do
  pyversion = `python --version`
  puts "Python Version: #{pyversion}"
  sh %( pip install -r requirements.txt )

  rubyversion = `ruby --version`
  puts "Ruby Version: #{rubyversion}"
end


task :verify do
  required_files.each do |fname|
    filename = expand_env(fname)
    puts "Verifying file #{filename}"
    raise "Missing required file #{filename}" unless File.file?(filename)
  end

  required_vars.each do |evar|
    raise "Missing required environment variable #{evar}" unless ENV[evar]
  end

  azversion = JSON.parse(`az version --output json`)
  azcliversion = azversion['azure-cli']
  puts "Azure CLI Version: #{azcliversion}"

  helmversion = `helm version --short`
  puts "Helm Version: #{helmversion}"

  tfversioninfo = JSON.parse(`terraform version --json`)
  tfversion = tfversioninfo['terraform_version']

  puts "Terraform Version: #{tfversion}"

  vars = JSON.parse(`hcltool overrides.tfvars`)
end

task init: :verify do
  sh %( terraform init )
end

task plan: :verify do
  sh %( terraform plan -var-file="user_vars.auto.tfvars" -var-file="overrides.tfvars" )
end

task apply: :verify do
  sh %( terraform apply -var-file="user_vars.auto.tfvars" -var-file="overrides.tfvars" )
end

task destroy: :verify do
  sh %( helm uninstall ipa )
  sh %( terraform destroy -var-file="user_vars.auto.tfvars" -var-file="overrides.tfvars" )
end

task credentials: :verify do
  sh %( az aks get-credentials --name #{vars['label']} --resource-group #{vars['label']}-#{vars['region']} --admin -f #{ENV['KUBECONFIG']} )
end

task initialize: :verify do
  sh %( az group create --location #{vars['region']} --name #{vars['label']}-common )
  sh %( az storage account create --name #{vars['account']}snapshots --resource-group #{vars['label']}-common )
end

task ipa: :verify do
  ipa = <<HEREDOC
global:
  appDomains: [#{vars['label']}.#{vars['region']}.#{vars['account']}.#{vars['domain_suffix']}]
  secretRefs:
    - indico-generated-secrets
    - indico-static-secrets
    - rabbitmq
    - azure-storage-key
rabbitmq:
  enabled: true
secrets:
  ocr_license_key: #{ENV['OCR_LICENSE_KEY']}
configs:
  allowed_origins: ALLOW_ALL
  postgres:
    app:
      user: indico
    metrics:
      user: indico
  storage:
    blob:
      s3:
      azure:
        account: #{vars['label']}#{vars['region']}
        key: ''
        container: blob
        prefix: ''
  extraIndicoConfigs:
    DEFAULT_OCR_ENGINE: omnipage
    OCR_ENGINES: readapi, omnipage
worker:
  serviceAccountName: workload-identity-storage-account
  services:
    acord-workflow:
      enabled: true
    formextraction:
      enabled: true
    glove-v1:
      enabled: true
    imagefeatures-v2:
      enabled: true
    objectdetection-predict:
      enabled: true
    objectdetection-train:
      enabled: true
    vdp:
      enabled: true
server:
  serviceAccountName: workload-identity-storage-account
  services:
    restapi-proxy:
      enabled: true
faust-worker:
  serviceAccountName: workload-identity-storage-account
rainbow-nginx:
  serviceAccountName: workload-identity-storage-account
app-edge:
  frontend:
    config:
      features:
        galleryEnabled: true
authSettings:
  manageAllData: 'True'
readapi:
  enabled: false
cronjob:
  services:
    storage-cleanup:
      enabled: true
HEREDOC
  File.write('ipa.yaml', ipa)
  puts("helm repo add indico https://harbor.devops.indico.io/chartrepo/indico-charts")
  puts("helm upgrade --install ipa indico/ipa --version #{vars['ipa_version']} -f ipa.yaml")
end
