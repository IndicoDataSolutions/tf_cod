terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = ">=3.40.0"
    }
    azuread = {
      source  = "hashicorp/azuread"
      version = "~> 2.33.0"
    }
    azapi = {
      source  = "Azure/azapi"
      version = ">=1.2.0"
    }
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = ">= 2.17.0"
    }
    kubectl = {
      source = "gavinbunney/kubectl"
    }
    helm = {
      source  = "hashicorp/helm"
      version = ">= 2.6.0"
    }
    argocd = {
      source  = "oboukili/argocd"
      version = "4.3.0"
    }
    local = {
      source  = "hashicorp/local"
      version = "=2.2.3"
    }
    github = {
      source  = "integrations/github"
      version = "4.26.0"
    }
    null = {
      source  = "hashicorp/null"
      version = "3.2.1"
    }
  }
}

provider "null" {
}

provider "azurerm" {
  features {
    key_vault {
      purge_soft_delete_on_destroy    = true
      recover_soft_deleted_key_vaults = true
    }
  }
}

provider "azuread" {
}

provider "azapi" {
}

provider "http" {}

provider "time" {}

provider "vault" {
  address          = var.vault_address
  skip_child_token = true
  auth_login_userpass {
    username = var.vault_username
    password = var.vault_password
  }
}
provider "github" {
  token = var.git_pat
  owner = "IndicoDataSolutions"
}
data "azurerm_subscription" "primary" {}
data "azurerm_client_config" "current" {}

data "http" "workstation-external-ip" {
  url = "http://ipv4.icanhazip.com"
}

data "azuread_service_principal" "redhat-openshift" {
  display_name = "Azure Red Hat OpenShift RP"
}

/*
resource "null_resource" "install_azure_cli" {
  triggers = {
    always_run = "${timestamp()}"
  }
  provisioner "local-exec" {
    command     = <<EOH
     az version
     env|sort
     az login --service-principal -u "$ARM_CLIENT_ID" -p "$ARM_CLIENT_SECRET" --tenant "$ARM_TENANT_ID"
     az aro list-credentials --name os4 --resource-group os4-eastus --output json
     az aro show --name os4 --resource-group os4-eastus --query '{api:apiserverProfile.ip, ingress:ingressProfiles[0].ip, consoleUrl:consoleProfile.url, apiUrl:apiserverProfile.url}' --output json

    EOH
    interpreter = ["/bin/bash", "-c"]
  }
}
*/

resource "azuread_application" "openshift-application" {
  display_name = "${var.label}-${var.region}"
  owners       = [data.azuread_client_config.current.object_id]
}

resource "azuread_service_principal" "openshift" {
  application_id               = azuread_application.openshift-application.application_id
  app_role_assignment_required = false
  owners                       = [data.azuread_client_config.current.object_id]
}

resource "azuread_application_password" "application-secret" {
  display_name          = "openshift-sp-secret"
  application_object_id = azuread_application.openshift-application.object_id
}

resource "azurerm_role_assignment" "virtual-network-assignment" {
  depends_on = [
    module.networking
  ]
  count                = length(var.roles)
  scope                = module.networking.vnet_id
  role_definition_name = var.roles[count.index].role
  principal_id         = azuread_service_principal.openshift.object_id
}

resource "azurerm_role_assignment" "resource-provider-assignment" {
  depends_on = [
    module.networking
  ]
  count                = length(var.roles)
  scope                = module.networking.vnet_id
  role_definition_name = var.roles[count.index].role
  principal_id         = data.azuread_service_principal.redhat-openshift.object_id
}

# argo 
provider "argocd" {
  server_addr = var.argo_host
  username    = var.argo_username
  password    = var.argo_password
}

provider "kubernetes" {
  #config_path    = local_file.kubeconfig.filename
  #config_context = lower("default/api-${var.label}-${var.account}-${var.region}-aroapp-io:6443/terraform-sa")

  host                   = "https://api.os4-indico-dev-azure.eastus.aroapp.io:6443"
  client_certificate     = base64decode("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVEakNDQXZhZ0F3SUJBZ0lSQUkyb05kYVhidXVFQU5vS2hkTC81eFV3RFFZSktvWklodmNOQVFFTEJRQXcKSmpFa01DSUdBMVVFQXd3YmEzVmlaUzFqYzNJdGMybG5ibVZ5WDBBeE5qYzFNRGszTnprd01CNFhEVEl6TURFegpNREUzTXpVeE1Wb1hEVEl6TURFek1URTJORGswTTFvd0Z6RVZNQk1HQTFVRUF4TU1kR1Z5Y21GbWIzSnRMWE5oCk1JSUNJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0NBZ0VBbTl3K0UzeittQTIrZTUrM2dtWU0KMkFyc2lIWmtZMjZHNUxHTDFVS3JRUm1ibWFaZ0RSTHVGbERDalg4SER6R2FwOUl3aWNpQkhFZndpVk9ZL3VtSQp1WmJvWmdZcVlyeU9EdnFpM1JWOXprVmdIWXVTVFcrYlRqOGtuOGd4aEFjdlBQYWx2ckV2U0ZUcDdXT1NwUWNYCmhlTWh2RWVUNDExNWs5NnJhbTBYS3ZTNDVxMXlCTFhNSUZWZW5LQUI0TnBxTEpTVFl2QTFFZ0dTdUo5d1U5b3MKc0x2R1k3Um5nd3hqWWhBc01wMjFCWkN1TEI5MGpBclFKZW9zeDR4TFlJNTVBZml3azhtVEVXcmxmeXc0N0k3ZwpsVk5iVko4SGlDT1lDSEtQcStrVG9WSE9HYnVTcnRhSnZtd3NsUFBwQ3ZqMkxnNjBKeFpZTDZDRlpPdzYyYy80CitJSjNxYzFXcHZSbG02aDdpUzQ5U1FJN3dhYWFRRnJ0N01oTldyZHlidXdBVUtaa2k4eUVXSi9sallLMjJBZ0MKbFdraGM3d09obkpFQVV4dUJBcEVQTTlERkthc0dHTVNzUUMyeXc1L0x0NE55SCs2UlpSc0tTYzUxbjVGNHZiWQpYY2dyOEV3aVA4QkFpd3BDRVVSNEpJb0w4RndLU2VOU0tDb2xuVzZKSzQ1VnNkZ1ppTHdEOWViaXJ2ZUxTNkdNCno2a1lQeEtDOGs1SDYzcllQb2JUblJlanJiNnpsL2xwaExWbXNjNmk2emVFay9GUjdraS9KMTkvYXlJRDJlalMKZG9LekE3UlZPREovNHZJUHFQc2NIbDRYakhCVmtvS1Uzb3dvQTlGbGRBTFYzVm9NNTQzWkFLK2dFZlBUc1UxVgpoakNsUE9hYk9yYUk4czdtS2NNbEcvRUNBd0VBQWFOR01FUXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3CkRBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JTZEFJYWFFVE1md09LNldCVEpXdU04L0lyQjRqQU4KQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBc1pJTnVTcGVzTVhHR3l1dmhrMEk3S0dVNDNvYXhNM2ZmZlFoOWhyUwprTVRaenV2czIzeW44cVlHRGRGUE13M0lWOG1yVGdxR0ZlaXBIcUtsTmtOVk1IMmJ5Wkg0L0p1WVdRZDRBSzMvCitJcTBnWFlmMTRzN0RSZmR6RGZvUGV5bUYzWWdVTEI4Wnc3SU1pbXJ2ZEtvYmdLRjg2SE5naXczZlY5ZVQyZlgKeEdyVVJrUkR0VHB0T3c5SkdmZjFSVVVSaG9lVVJsZlNOUGFQTUdKanl3V09ZcmF4MUdMYU85WlJZSVNIa3JPTgpYYkpBeVQxQ1ZRR3NTV0g2U2wvZmh4UDVPTnU4YmxDbDd5RnhOVi94WkdNVHUyaEtjUENQd2YwVzFqaGJWMHMwCk1ROHJKNFcyYko0WVlzVldFdVdYaGFJbFJjS1J5dWlHYU9SWVd0QzA2Qmd3K0E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t")
  client_key             = base64decode("LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRUUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Nzd2dna25BZ0VBQW9JQ0FRQ2IzRDRUZlA2WURiNTcKbjdlQ1pnellDdXlJZG1SamJvYmtzWXZWUXF0QkdadVpwbUFORXU0V1VNS05md2NQTVpxbjBqQ0p5SUVjUi9DSgpVNWorNllpNWx1aG1CaXBpdkk0TytxTGRGWDNPUldBZGk1Sk5iNXRPUHlTZnlER0VCeTg4OXFXK3NTOUlWT250Clk1S2xCeGVGNHlHOFI1UGpYWG1UM3F0cWJSY3E5TGptclhJRXRjd2dWVjZjb0FIZzJtb3NsSk5pOERVU0FaSzQKbjNCVDJpeXd1OFpqdEdlRERHTmlFQ3d5bmJVRmtLNHNIM1NNQ3RBbDZpekhqRXRnam5rQitMQ1R5Wk1SYXVWLwpMRGpzanVDVlUxdFVud2VJSTVnSWNvK3I2Uk9oVWM0WnU1S3Uxb20rYkN5VTgra0srUFl1RHJRbkZsZ3ZvSVZrCjdEclp6L2o0Z25lcHpWYW05R1dicUh1SkxqMUpBanZCcHBwQVd1M3N5RTFhdDNKdTdBQlFwbVNMeklSWW4rV04KZ3JiWUNBS1ZhU0Z6dkE2R2NrUUJURzRFQ2tROHowTVVwcXdZWXhLeEFMYkxEbjh1M2czSWY3cEZsR3dwSnpuVwpma1hpOXRoZHlDdndUQ0kvd0VDTENrSVJSSGdraWd2d1hBcEo0MUlvS2lXZGJva3JqbFd4MkJtSXZBUDE1dUt1Cjk0dExvWXpQcVJnL0VvTHlUa2ZyZXRnK2h0T2RGNk90dnJPWCtXbUV0V2F4enFMck40U1Q4Vkh1U0w4blgzOXIKSWdQWjZOSjJnck1EdEZVNE1uL2k4ZytvK3h3ZVhoZU1jRldTZ3BUZWpDZ0QwV1YwQXRYZFdnem5qZGtBcjZBUgo4OU94VFZXR01LVTg1cHM2dG9qeXp1WXB3eVViOFFJREFRQUJBb0lDQUZqRmJYbk9GSGZvUkJqSFZFN3A3dURSCi8veU5hZ29UOXJLa3lSOFRGTlZFVDVLSTUyWXE1UDVDeXp5cUlBd3dWWVRHTzYwT1RUTWRha3ZkR0dRQUFVYXIKUS94d0FJNHlGTHRGVjZPU1RSQkNCVWR1cWtwK2liZGNVWERNSmgrcnMrVUdHa3J0UWgveGRUY25JbXZxQ1NUUgp3L0luMW55R1RldkJ4R0llZGphYUlnSUl3Y3NhL0lOaC9EdzdDamJXVCtqS1N0UHNPbDNpRlg0Z0dXczQ5WUZICndld2g0VjhMbkVOTE1ORTNiOVlXbkkwMjhUdWVJUVduUmcvMXdTemltTnRkbUx6ajcyYlpPcE5mVGFDMmxBV1kKNzRqWDl3TThPcWg5RDRWN2dCbStyU09NNlRPNXI4U01laXZ3YkVnNm1vU0xEV0xCNEVKb0svSGFkbjUrYksvQwpoMnpsYWVOdVFLQ0QvUHBreFphN1BVd1pKMWlEQ2IvYlpHd0N6dzREN0NmdEtIRGdkSmFXa3BiV3lydVRqUnNHCmJTNFBuU0x5YlRrTmNJbGpsM2svLzBYU2RueTdvWHhUNmxVZGRPaENnRVc2amkrV21sa29Pekg2NWpmWnd0QmkKSHJENzdaZ2NCcE9LdlVXNXRQT3ZreHhZamxKeE9FSUhkdk13anpHZ25wQ0RLa0NXb2xCOVRocjBMTWc5cnFWaAp2M1JZcHVTMFVOVE5ncWZxS2xtUWhKUm1XbVd3QVBMejVYZHk1c1Nvc1F3WHN1MmZWMjkrRHlnUlJqSTNNZmpXClZ0bDJRUWxkL0lOTHQySXZsWUdSWGQ1ZzhFMHdWVkt3bzhOTy9lcTlGbEpWYXRobDE1T01FNzh6WHhxeDdNWmEKNHZaNEJUWGV6WEtvUGhMMWsxZk5Bb0lCQVFETlBldVkyL1BCenJ3YjNXTDRpUVdVak9sVi8rQkMxNEJUd2xXcQoyanN6NElJNVd5QTM5eFNkVURXbUpzLzdiOUtiU0tKQmRLbk1hZXZKb1luYW51R2JrQjVzOER6dlhqT05XeTU3Cko4UTNxL0ZMME1TWlUvcW1HQitGb3VqVnZlK3ZIWi9Kdk1hcWFteW5yaXNKZ1RaTVI4d3oxMTlrQndJQVlpc3kKU1poeThrb0tMbURta1ZiYjB1VXNsd1VEbUlIWVZDclI5QkNQOXIzRTdUcWpEUUJnQ3Nxb3VGTkR2Q0Y4M09KNgpkUFJZdTdjMms2N3pwdWRrN3pHV0UvRmkvWmpsNnJWSDZJaTcvQ2VWeG9TYm1JTTBmSTNjNnJ2dVc4bWVUaktVCkYyZTg0bHFteVZzS1padTBtSm1yRHhsTFZlVWhJR3RXaWpxRmk3amw1dmRsanpuekFvSUJBUURDWit5RkxyWUYKczRya20wQ2ZjaFdLYTBuUkZWL2cvSFYxa0NJYzlULzM1RC8yaVZXU201UWljK1IyQ20zYUUrZmdYcXprS2FmNgpvOVRmcTMxeFkvMm13NTh6eVJscWZHanl5WnJjeDdJbEhQbU01SExDRnJIdTJ2YUd5WklLZXVDZ0RDV0VhbVdoCmdnbndNL25USElnekpPRFJUbkg4ZVRHc1hBWjg1R0RpaUJpMW1jTk9OWjlsUlpHK3FucEZSVFJBZTJUbDlWQ2wKelVXZHg4Ny83V2VVZGd3ajRMbjZJNi9TaEtTcEtNb1Jrb2crWlNLZFpRUWR0dkJtVzlJRW15T2JMZ1F5QkF0QgpIZHRPRHBLa0kvSUdHcGFPcHl0N0FHQ0t6Tkk2ajF5SGRGa0pyeVNzaThDaktsZXFVMFJFaHhzd1ZXbGJscjdOCjN1akt6dlg4eVFlTEFvSUJBSDhmK0ZyUStqVzBLSDJWN2VTRmNvaGxrMjJxTkswU01ERXhNTURIdFYzWGxMR1UKQ092QlJlcCtzUXcrQkJyNFUxbk5ibnJlbVFHOUpjZlpIN3JqS0ZpanRzVEJOTzBLeXlHbU5hOGduWC9pSjI1UApYRWFnWnFNVVZBb0JNdmlaVWVtRWp1RjA1UlRQSUlmbjhFNU4wMlVDSDdDSW1WUXFwd20zeEl1OFhBbnVtditkClpIWEwxaUlJaWR6Sm1kaDFVUSsrYWx0ck1nc0p5TmMrSFZDN0Q5MXRNY081a0JGbmFOS2ZPa1NoUm12anNZTEQKak56c0oyMDBYdUZYYnU5aXBwN2FkdmlZUm9FeG1ROURUQVhZUElSNUZhR2RYMVF2VkQyU3IrOWNZK3Z4eERhRQpoN2h6NFRMR1JvQld0Tk1kMi9OZDBqNWpGZ1o3MmNYRS9yM1FMaE1DZ2dFQUNYMUhKMDBiWjNYWEhzZVJSUGN0Cm8vOE9zRjBKdkJLMnJSRm5DT0RUeVlianRHWUp2a2xIMXRLdllTK3JJd3o3c1pFTmdXbWpJSEhrenpJd3dsc3UKSTNqRENhVVVUNFZaSGhqSExXVzJCV2UvcXFmd0RoZExnaXhBQWw1T2VhSjcyblFkVkxSWTE2UmdWZEJEcnBGaQorSlFoUVRaQ0RCL2lVOVorSHBTTFFpT0FpVVRES3NzbFI2MDRxd1RwU1A1U3laNzhVdGxCb1lZK2tyQVJJNTcwCkFtUXN2WWVYckdVWGpRQWFoWU5QTWNKa1VoOWZyQzBsSVVvdnU5OVpoZzRJaytlUUh0emhxOEVJVm13UnJsOXUKemV0NFUraEhFQTc1cDJ6T0NqdTdPWVZ0WHpLa2FLTzl1SGsxcEVQQ1BsSVYrcXNBcEk3Y0szSnBESlZEbnA0MQpkd0tDQVFCOUhEVk1aZTg5T1AwaVM3VkZmQ0svU01td3l5c1RHZWhmaStCYWJ3ZWdsVmxXWXdEVVdGd2M0NnJyCis0QWJQZGJRakt4VnhmazNIaXdUdmZNVHgvbStwaWpqS0JIL25CTnV3T2VYU1VvTXF0UWxUWGdpT2pibDM2MTEKOVY5ZGRpa0YzU3hMK2ZVTEhIS1pVa3NFczh1Z0J2Z0huN0NNSS9hd2E4eEd1aUNmVmtId24wdm4rMU1GQ2ZENgpYcUlsanptRXNreEdoVXd5VzhVTk1DaG9GdjF0Z3lTS01zZXVKYkRka2t4WUFTVTQzQWJISFR2dkFtWDZTT0UvCnBTd2c1ejdhdFZxbnE0aHJidXJOM2RTSHA3cFkrd1lWQ2ZudHFMakhValkyai9TZVRIT0F2VTFkY0huM05GZHYKSzZJZWFuZGpGOXJhMitWL3JOL05DVU51Q1dKcgotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0t")
  cluster_ca_certificate = base64decode("")
}

provider "kubectl" {
  #config_path    = local_file.kubeconfig.filename
  #config_context = lower("default/api-${var.label}-${var.account}-${var.region}-aroapp-io:6443/terraform-sa")

  host                   = "https://api.os4-indico-dev-azure.eastus.aroapp.io:6443"
  client_certificate     = base64decode("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVEakNDQXZhZ0F3SUJBZ0lSQUkyb05kYVhidXVFQU5vS2hkTC81eFV3RFFZSktvWklodmNOQVFFTEJRQXcKSmpFa01DSUdBMVVFQXd3YmEzVmlaUzFqYzNJdGMybG5ibVZ5WDBBeE5qYzFNRGszTnprd01CNFhEVEl6TURFegpNREUzTXpVeE1Wb1hEVEl6TURFek1URTJORGswTTFvd0Z6RVZNQk1HQTFVRUF4TU1kR1Z5Y21GbWIzSnRMWE5oCk1JSUNJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0NBZ0VBbTl3K0UzeittQTIrZTUrM2dtWU0KMkFyc2lIWmtZMjZHNUxHTDFVS3JRUm1ibWFaZ0RSTHVGbERDalg4SER6R2FwOUl3aWNpQkhFZndpVk9ZL3VtSQp1WmJvWmdZcVlyeU9EdnFpM1JWOXprVmdIWXVTVFcrYlRqOGtuOGd4aEFjdlBQYWx2ckV2U0ZUcDdXT1NwUWNYCmhlTWh2RWVUNDExNWs5NnJhbTBYS3ZTNDVxMXlCTFhNSUZWZW5LQUI0TnBxTEpTVFl2QTFFZ0dTdUo5d1U5b3MKc0x2R1k3Um5nd3hqWWhBc01wMjFCWkN1TEI5MGpBclFKZW9zeDR4TFlJNTVBZml3azhtVEVXcmxmeXc0N0k3ZwpsVk5iVko4SGlDT1lDSEtQcStrVG9WSE9HYnVTcnRhSnZtd3NsUFBwQ3ZqMkxnNjBKeFpZTDZDRlpPdzYyYy80CitJSjNxYzFXcHZSbG02aDdpUzQ5U1FJN3dhYWFRRnJ0N01oTldyZHlidXdBVUtaa2k4eUVXSi9sallLMjJBZ0MKbFdraGM3d09obkpFQVV4dUJBcEVQTTlERkthc0dHTVNzUUMyeXc1L0x0NE55SCs2UlpSc0tTYzUxbjVGNHZiWQpYY2dyOEV3aVA4QkFpd3BDRVVSNEpJb0w4RndLU2VOU0tDb2xuVzZKSzQ1VnNkZ1ppTHdEOWViaXJ2ZUxTNkdNCno2a1lQeEtDOGs1SDYzcllQb2JUblJlanJiNnpsL2xwaExWbXNjNmk2emVFay9GUjdraS9KMTkvYXlJRDJlalMKZG9LekE3UlZPREovNHZJUHFQc2NIbDRYakhCVmtvS1Uzb3dvQTlGbGRBTFYzVm9NNTQzWkFLK2dFZlBUc1UxVgpoakNsUE9hYk9yYUk4czdtS2NNbEcvRUNBd0VBQWFOR01FUXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3CkRBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JTZEFJYWFFVE1md09LNldCVEpXdU04L0lyQjRqQU4KQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBc1pJTnVTcGVzTVhHR3l1dmhrMEk3S0dVNDNvYXhNM2ZmZlFoOWhyUwprTVRaenV2czIzeW44cVlHRGRGUE13M0lWOG1yVGdxR0ZlaXBIcUtsTmtOVk1IMmJ5Wkg0L0p1WVdRZDRBSzMvCitJcTBnWFlmMTRzN0RSZmR6RGZvUGV5bUYzWWdVTEI4Wnc3SU1pbXJ2ZEtvYmdLRjg2SE5naXczZlY5ZVQyZlgKeEdyVVJrUkR0VHB0T3c5SkdmZjFSVVVSaG9lVVJsZlNOUGFQTUdKanl3V09ZcmF4MUdMYU85WlJZSVNIa3JPTgpYYkpBeVQxQ1ZRR3NTV0g2U2wvZmh4UDVPTnU4YmxDbDd5RnhOVi94WkdNVHUyaEtjUENQd2YwVzFqaGJWMHMwCk1ROHJKNFcyYko0WVlzVldFdVdYaGFJbFJjS1J5dWlHYU9SWVd0QzA2Qmd3K0E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t")
  client_key             = base64decode("LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRUUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Nzd2dna25BZ0VBQW9JQ0FRQ2IzRDRUZlA2WURiNTcKbjdlQ1pnellDdXlJZG1SamJvYmtzWXZWUXF0QkdadVpwbUFORXU0V1VNS05md2NQTVpxbjBqQ0p5SUVjUi9DSgpVNWorNllpNWx1aG1CaXBpdkk0TytxTGRGWDNPUldBZGk1Sk5iNXRPUHlTZnlER0VCeTg4OXFXK3NTOUlWT250Clk1S2xCeGVGNHlHOFI1UGpYWG1UM3F0cWJSY3E5TGptclhJRXRjd2dWVjZjb0FIZzJtb3NsSk5pOERVU0FaSzQKbjNCVDJpeXd1OFpqdEdlRERHTmlFQ3d5bmJVRmtLNHNIM1NNQ3RBbDZpekhqRXRnam5rQitMQ1R5Wk1SYXVWLwpMRGpzanVDVlUxdFVud2VJSTVnSWNvK3I2Uk9oVWM0WnU1S3Uxb20rYkN5VTgra0srUFl1RHJRbkZsZ3ZvSVZrCjdEclp6L2o0Z25lcHpWYW05R1dicUh1SkxqMUpBanZCcHBwQVd1M3N5RTFhdDNKdTdBQlFwbVNMeklSWW4rV04KZ3JiWUNBS1ZhU0Z6dkE2R2NrUUJURzRFQ2tROHowTVVwcXdZWXhLeEFMYkxEbjh1M2czSWY3cEZsR3dwSnpuVwpma1hpOXRoZHlDdndUQ0kvd0VDTENrSVJSSGdraWd2d1hBcEo0MUlvS2lXZGJva3JqbFd4MkJtSXZBUDE1dUt1Cjk0dExvWXpQcVJnL0VvTHlUa2ZyZXRnK2h0T2RGNk90dnJPWCtXbUV0V2F4enFMck40U1Q4Vkh1U0w4blgzOXIKSWdQWjZOSjJnck1EdEZVNE1uL2k4ZytvK3h3ZVhoZU1jRldTZ3BUZWpDZ0QwV1YwQXRYZFdnem5qZGtBcjZBUgo4OU94VFZXR01LVTg1cHM2dG9qeXp1WXB3eVViOFFJREFRQUJBb0lDQUZqRmJYbk9GSGZvUkJqSFZFN3A3dURSCi8veU5hZ29UOXJLa3lSOFRGTlZFVDVLSTUyWXE1UDVDeXp5cUlBd3dWWVRHTzYwT1RUTWRha3ZkR0dRQUFVYXIKUS94d0FJNHlGTHRGVjZPU1RSQkNCVWR1cWtwK2liZGNVWERNSmgrcnMrVUdHa3J0UWgveGRUY25JbXZxQ1NUUgp3L0luMW55R1RldkJ4R0llZGphYUlnSUl3Y3NhL0lOaC9EdzdDamJXVCtqS1N0UHNPbDNpRlg0Z0dXczQ5WUZICndld2g0VjhMbkVOTE1ORTNiOVlXbkkwMjhUdWVJUVduUmcvMXdTemltTnRkbUx6ajcyYlpPcE5mVGFDMmxBV1kKNzRqWDl3TThPcWg5RDRWN2dCbStyU09NNlRPNXI4U01laXZ3YkVnNm1vU0xEV0xCNEVKb0svSGFkbjUrYksvQwpoMnpsYWVOdVFLQ0QvUHBreFphN1BVd1pKMWlEQ2IvYlpHd0N6dzREN0NmdEtIRGdkSmFXa3BiV3lydVRqUnNHCmJTNFBuU0x5YlRrTmNJbGpsM2svLzBYU2RueTdvWHhUNmxVZGRPaENnRVc2amkrV21sa29Pekg2NWpmWnd0QmkKSHJENzdaZ2NCcE9LdlVXNXRQT3ZreHhZamxKeE9FSUhkdk13anpHZ25wQ0RLa0NXb2xCOVRocjBMTWc5cnFWaAp2M1JZcHVTMFVOVE5ncWZxS2xtUWhKUm1XbVd3QVBMejVYZHk1c1Nvc1F3WHN1MmZWMjkrRHlnUlJqSTNNZmpXClZ0bDJRUWxkL0lOTHQySXZsWUdSWGQ1ZzhFMHdWVkt3bzhOTy9lcTlGbEpWYXRobDE1T01FNzh6WHhxeDdNWmEKNHZaNEJUWGV6WEtvUGhMMWsxZk5Bb0lCQVFETlBldVkyL1BCenJ3YjNXTDRpUVdVak9sVi8rQkMxNEJUd2xXcQoyanN6NElJNVd5QTM5eFNkVURXbUpzLzdiOUtiU0tKQmRLbk1hZXZKb1luYW51R2JrQjVzOER6dlhqT05XeTU3Cko4UTNxL0ZMME1TWlUvcW1HQitGb3VqVnZlK3ZIWi9Kdk1hcWFteW5yaXNKZ1RaTVI4d3oxMTlrQndJQVlpc3kKU1poeThrb0tMbURta1ZiYjB1VXNsd1VEbUlIWVZDclI5QkNQOXIzRTdUcWpEUUJnQ3Nxb3VGTkR2Q0Y4M09KNgpkUFJZdTdjMms2N3pwdWRrN3pHV0UvRmkvWmpsNnJWSDZJaTcvQ2VWeG9TYm1JTTBmSTNjNnJ2dVc4bWVUaktVCkYyZTg0bHFteVZzS1padTBtSm1yRHhsTFZlVWhJR3RXaWpxRmk3amw1dmRsanpuekFvSUJBUURDWit5RkxyWUYKczRya20wQ2ZjaFdLYTBuUkZWL2cvSFYxa0NJYzlULzM1RC8yaVZXU201UWljK1IyQ20zYUUrZmdYcXprS2FmNgpvOVRmcTMxeFkvMm13NTh6eVJscWZHanl5WnJjeDdJbEhQbU01SExDRnJIdTJ2YUd5WklLZXVDZ0RDV0VhbVdoCmdnbndNL25USElnekpPRFJUbkg4ZVRHc1hBWjg1R0RpaUJpMW1jTk9OWjlsUlpHK3FucEZSVFJBZTJUbDlWQ2wKelVXZHg4Ny83V2VVZGd3ajRMbjZJNi9TaEtTcEtNb1Jrb2crWlNLZFpRUWR0dkJtVzlJRW15T2JMZ1F5QkF0QgpIZHRPRHBLa0kvSUdHcGFPcHl0N0FHQ0t6Tkk2ajF5SGRGa0pyeVNzaThDaktsZXFVMFJFaHhzd1ZXbGJscjdOCjN1akt6dlg4eVFlTEFvSUJBSDhmK0ZyUStqVzBLSDJWN2VTRmNvaGxrMjJxTkswU01ERXhNTURIdFYzWGxMR1UKQ092QlJlcCtzUXcrQkJyNFUxbk5ibnJlbVFHOUpjZlpIN3JqS0ZpanRzVEJOTzBLeXlHbU5hOGduWC9pSjI1UApYRWFnWnFNVVZBb0JNdmlaVWVtRWp1RjA1UlRQSUlmbjhFNU4wMlVDSDdDSW1WUXFwd20zeEl1OFhBbnVtditkClpIWEwxaUlJaWR6Sm1kaDFVUSsrYWx0ck1nc0p5TmMrSFZDN0Q5MXRNY081a0JGbmFOS2ZPa1NoUm12anNZTEQKak56c0oyMDBYdUZYYnU5aXBwN2FkdmlZUm9FeG1ROURUQVhZUElSNUZhR2RYMVF2VkQyU3IrOWNZK3Z4eERhRQpoN2h6NFRMR1JvQld0Tk1kMi9OZDBqNWpGZ1o3MmNYRS9yM1FMaE1DZ2dFQUNYMUhKMDBiWjNYWEhzZVJSUGN0Cm8vOE9zRjBKdkJLMnJSRm5DT0RUeVlianRHWUp2a2xIMXRLdllTK3JJd3o3c1pFTmdXbWpJSEhrenpJd3dsc3UKSTNqRENhVVVUNFZaSGhqSExXVzJCV2UvcXFmd0RoZExnaXhBQWw1T2VhSjcyblFkVkxSWTE2UmdWZEJEcnBGaQorSlFoUVRaQ0RCL2lVOVorSHBTTFFpT0FpVVRES3NzbFI2MDRxd1RwU1A1U3laNzhVdGxCb1lZK2tyQVJJNTcwCkFtUXN2WWVYckdVWGpRQWFoWU5QTWNKa1VoOWZyQzBsSVVvdnU5OVpoZzRJaytlUUh0emhxOEVJVm13UnJsOXUKemV0NFUraEhFQTc1cDJ6T0NqdTdPWVZ0WHpLa2FLTzl1SGsxcEVQQ1BsSVYrcXNBcEk3Y0szSnBESlZEbnA0MQpkd0tDQVFCOUhEVk1aZTg5T1AwaVM3VkZmQ0svU01td3l5c1RHZWhmaStCYWJ3ZWdsVmxXWXdEVVdGd2M0NnJyCis0QWJQZGJRakt4VnhmazNIaXdUdmZNVHgvbStwaWpqS0JIL25CTnV3T2VYU1VvTXF0UWxUWGdpT2pibDM2MTEKOVY5ZGRpa0YzU3hMK2ZVTEhIS1pVa3NFczh1Z0J2Z0huN0NNSS9hd2E4eEd1aUNmVmtId24wdm4rMU1GQ2ZENgpYcUlsanptRXNreEdoVXd5VzhVTk1DaG9GdjF0Z3lTS01zZXVKYkRka2t4WUFTVTQzQWJISFR2dkFtWDZTT0UvCnBTd2c1ejdhdFZxbnE0aHJidXJOM2RTSHA3cFkrd1lWQ2ZudHFMakhValkyai9TZVRIT0F2VTFkY0huM05GZHYKSzZJZWFuZGpGOXJhMitWL3JOL05DVU51Q1dKcgotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0t")
  cluster_ca_certificate = base64decode("")

  load_config_file = true
}

provider "helm" {
  debug = true

  kubernetes {
    #config_path    = local_file.kubeconfig.filename
    #config_context = lower("default/api-${var.label}-${var.account}-${var.region}-aroapp-io:6443/terraform-sa")

    host                   = "https://api.os4-indico-dev-azure.eastus.aroapp.io:6443"
    client_certificate     = base64decode("LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVEakNDQXZhZ0F3SUJBZ0lSQUkyb05kYVhidXVFQU5vS2hkTC81eFV3RFFZSktvWklodmNOQVFFTEJRQXcKSmpFa01DSUdBMVVFQXd3YmEzVmlaUzFqYzNJdGMybG5ibVZ5WDBBeE5qYzFNRGszTnprd01CNFhEVEl6TURFegpNREUzTXpVeE1Wb1hEVEl6TURFek1URTJORGswTTFvd0Z6RVZNQk1HQTFVRUF4TU1kR1Z5Y21GbWIzSnRMWE5oCk1JSUNJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0NBZ0VBbTl3K0UzeittQTIrZTUrM2dtWU0KMkFyc2lIWmtZMjZHNUxHTDFVS3JRUm1ibWFaZ0RSTHVGbERDalg4SER6R2FwOUl3aWNpQkhFZndpVk9ZL3VtSQp1WmJvWmdZcVlyeU9EdnFpM1JWOXprVmdIWXVTVFcrYlRqOGtuOGd4aEFjdlBQYWx2ckV2U0ZUcDdXT1NwUWNYCmhlTWh2RWVUNDExNWs5NnJhbTBYS3ZTNDVxMXlCTFhNSUZWZW5LQUI0TnBxTEpTVFl2QTFFZ0dTdUo5d1U5b3MKc0x2R1k3Um5nd3hqWWhBc01wMjFCWkN1TEI5MGpBclFKZW9zeDR4TFlJNTVBZml3azhtVEVXcmxmeXc0N0k3ZwpsVk5iVko4SGlDT1lDSEtQcStrVG9WSE9HYnVTcnRhSnZtd3NsUFBwQ3ZqMkxnNjBKeFpZTDZDRlpPdzYyYy80CitJSjNxYzFXcHZSbG02aDdpUzQ5U1FJN3dhYWFRRnJ0N01oTldyZHlidXdBVUtaa2k4eUVXSi9sallLMjJBZ0MKbFdraGM3d09obkpFQVV4dUJBcEVQTTlERkthc0dHTVNzUUMyeXc1L0x0NE55SCs2UlpSc0tTYzUxbjVGNHZiWQpYY2dyOEV3aVA4QkFpd3BDRVVSNEpJb0w4RndLU2VOU0tDb2xuVzZKSzQ1VnNkZ1ppTHdEOWViaXJ2ZUxTNkdNCno2a1lQeEtDOGs1SDYzcllQb2JUblJlanJiNnpsL2xwaExWbXNjNmk2emVFay9GUjdraS9KMTkvYXlJRDJlalMKZG9LekE3UlZPREovNHZJUHFQc2NIbDRYakhCVmtvS1Uzb3dvQTlGbGRBTFYzVm9NNTQzWkFLK2dFZlBUc1UxVgpoakNsUE9hYk9yYUk4czdtS2NNbEcvRUNBd0VBQWFOR01FUXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3CkRBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JTZEFJYWFFVE1md09LNldCVEpXdU04L0lyQjRqQU4KQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBc1pJTnVTcGVzTVhHR3l1dmhrMEk3S0dVNDNvYXhNM2ZmZlFoOWhyUwprTVRaenV2czIzeW44cVlHRGRGUE13M0lWOG1yVGdxR0ZlaXBIcUtsTmtOVk1IMmJ5Wkg0L0p1WVdRZDRBSzMvCitJcTBnWFlmMTRzN0RSZmR6RGZvUGV5bUYzWWdVTEI4Wnc3SU1pbXJ2ZEtvYmdLRjg2SE5naXczZlY5ZVQyZlgKeEdyVVJrUkR0VHB0T3c5SkdmZjFSVVVSaG9lVVJsZlNOUGFQTUdKanl3V09ZcmF4MUdMYU85WlJZSVNIa3JPTgpYYkpBeVQxQ1ZRR3NTV0g2U2wvZmh4UDVPTnU4YmxDbDd5RnhOVi94WkdNVHUyaEtjUENQd2YwVzFqaGJWMHMwCk1ROHJKNFcyYko0WVlzVldFdVdYaGFJbFJjS1J5dWlHYU9SWVd0QzA2Qmd3K0E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t")
    client_key             = base64decode("LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRUUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1Nzd2dna25BZ0VBQW9JQ0FRQ2IzRDRUZlA2WURiNTcKbjdlQ1pnellDdXlJZG1SamJvYmtzWXZWUXF0QkdadVpwbUFORXU0V1VNS05md2NQTVpxbjBqQ0p5SUVjUi9DSgpVNWorNllpNWx1aG1CaXBpdkk0TytxTGRGWDNPUldBZGk1Sk5iNXRPUHlTZnlER0VCeTg4OXFXK3NTOUlWT250Clk1S2xCeGVGNHlHOFI1UGpYWG1UM3F0cWJSY3E5TGptclhJRXRjd2dWVjZjb0FIZzJtb3NsSk5pOERVU0FaSzQKbjNCVDJpeXd1OFpqdEdlRERHTmlFQ3d5bmJVRmtLNHNIM1NNQ3RBbDZpekhqRXRnam5rQitMQ1R5Wk1SYXVWLwpMRGpzanVDVlUxdFVud2VJSTVnSWNvK3I2Uk9oVWM0WnU1S3Uxb20rYkN5VTgra0srUFl1RHJRbkZsZ3ZvSVZrCjdEclp6L2o0Z25lcHpWYW05R1dicUh1SkxqMUpBanZCcHBwQVd1M3N5RTFhdDNKdTdBQlFwbVNMeklSWW4rV04KZ3JiWUNBS1ZhU0Z6dkE2R2NrUUJURzRFQ2tROHowTVVwcXdZWXhLeEFMYkxEbjh1M2czSWY3cEZsR3dwSnpuVwpma1hpOXRoZHlDdndUQ0kvd0VDTENrSVJSSGdraWd2d1hBcEo0MUlvS2lXZGJva3JqbFd4MkJtSXZBUDE1dUt1Cjk0dExvWXpQcVJnL0VvTHlUa2ZyZXRnK2h0T2RGNk90dnJPWCtXbUV0V2F4enFMck40U1Q4Vkh1U0w4blgzOXIKSWdQWjZOSjJnck1EdEZVNE1uL2k4ZytvK3h3ZVhoZU1jRldTZ3BUZWpDZ0QwV1YwQXRYZFdnem5qZGtBcjZBUgo4OU94VFZXR01LVTg1cHM2dG9qeXp1WXB3eVViOFFJREFRQUJBb0lDQUZqRmJYbk9GSGZvUkJqSFZFN3A3dURSCi8veU5hZ29UOXJLa3lSOFRGTlZFVDVLSTUyWXE1UDVDeXp5cUlBd3dWWVRHTzYwT1RUTWRha3ZkR0dRQUFVYXIKUS94d0FJNHlGTHRGVjZPU1RSQkNCVWR1cWtwK2liZGNVWERNSmgrcnMrVUdHa3J0UWgveGRUY25JbXZxQ1NUUgp3L0luMW55R1RldkJ4R0llZGphYUlnSUl3Y3NhL0lOaC9EdzdDamJXVCtqS1N0UHNPbDNpRlg0Z0dXczQ5WUZICndld2g0VjhMbkVOTE1ORTNiOVlXbkkwMjhUdWVJUVduUmcvMXdTemltTnRkbUx6ajcyYlpPcE5mVGFDMmxBV1kKNzRqWDl3TThPcWg5RDRWN2dCbStyU09NNlRPNXI4U01laXZ3YkVnNm1vU0xEV0xCNEVKb0svSGFkbjUrYksvQwpoMnpsYWVOdVFLQ0QvUHBreFphN1BVd1pKMWlEQ2IvYlpHd0N6dzREN0NmdEtIRGdkSmFXa3BiV3lydVRqUnNHCmJTNFBuU0x5YlRrTmNJbGpsM2svLzBYU2RueTdvWHhUNmxVZGRPaENnRVc2amkrV21sa29Pekg2NWpmWnd0QmkKSHJENzdaZ2NCcE9LdlVXNXRQT3ZreHhZamxKeE9FSUhkdk13anpHZ25wQ0RLa0NXb2xCOVRocjBMTWc5cnFWaAp2M1JZcHVTMFVOVE5ncWZxS2xtUWhKUm1XbVd3QVBMejVYZHk1c1Nvc1F3WHN1MmZWMjkrRHlnUlJqSTNNZmpXClZ0bDJRUWxkL0lOTHQySXZsWUdSWGQ1ZzhFMHdWVkt3bzhOTy9lcTlGbEpWYXRobDE1T01FNzh6WHhxeDdNWmEKNHZaNEJUWGV6WEtvUGhMMWsxZk5Bb0lCQVFETlBldVkyL1BCenJ3YjNXTDRpUVdVak9sVi8rQkMxNEJUd2xXcQoyanN6NElJNVd5QTM5eFNkVURXbUpzLzdiOUtiU0tKQmRLbk1hZXZKb1luYW51R2JrQjVzOER6dlhqT05XeTU3Cko4UTNxL0ZMME1TWlUvcW1HQitGb3VqVnZlK3ZIWi9Kdk1hcWFteW5yaXNKZ1RaTVI4d3oxMTlrQndJQVlpc3kKU1poeThrb0tMbURta1ZiYjB1VXNsd1VEbUlIWVZDclI5QkNQOXIzRTdUcWpEUUJnQ3Nxb3VGTkR2Q0Y4M09KNgpkUFJZdTdjMms2N3pwdWRrN3pHV0UvRmkvWmpsNnJWSDZJaTcvQ2VWeG9TYm1JTTBmSTNjNnJ2dVc4bWVUaktVCkYyZTg0bHFteVZzS1padTBtSm1yRHhsTFZlVWhJR3RXaWpxRmk3amw1dmRsanpuekFvSUJBUURDWit5RkxyWUYKczRya20wQ2ZjaFdLYTBuUkZWL2cvSFYxa0NJYzlULzM1RC8yaVZXU201UWljK1IyQ20zYUUrZmdYcXprS2FmNgpvOVRmcTMxeFkvMm13NTh6eVJscWZHanl5WnJjeDdJbEhQbU01SExDRnJIdTJ2YUd5WklLZXVDZ0RDV0VhbVdoCmdnbndNL25USElnekpPRFJUbkg4ZVRHc1hBWjg1R0RpaUJpMW1jTk9OWjlsUlpHK3FucEZSVFJBZTJUbDlWQ2wKelVXZHg4Ny83V2VVZGd3ajRMbjZJNi9TaEtTcEtNb1Jrb2crWlNLZFpRUWR0dkJtVzlJRW15T2JMZ1F5QkF0QgpIZHRPRHBLa0kvSUdHcGFPcHl0N0FHQ0t6Tkk2ajF5SGRGa0pyeVNzaThDaktsZXFVMFJFaHhzd1ZXbGJscjdOCjN1akt6dlg4eVFlTEFvSUJBSDhmK0ZyUStqVzBLSDJWN2VTRmNvaGxrMjJxTkswU01ERXhNTURIdFYzWGxMR1UKQ092QlJlcCtzUXcrQkJyNFUxbk5ibnJlbVFHOUpjZlpIN3JqS0ZpanRzVEJOTzBLeXlHbU5hOGduWC9pSjI1UApYRWFnWnFNVVZBb0JNdmlaVWVtRWp1RjA1UlRQSUlmbjhFNU4wMlVDSDdDSW1WUXFwd20zeEl1OFhBbnVtditkClpIWEwxaUlJaWR6Sm1kaDFVUSsrYWx0ck1nc0p5TmMrSFZDN0Q5MXRNY081a0JGbmFOS2ZPa1NoUm12anNZTEQKak56c0oyMDBYdUZYYnU5aXBwN2FkdmlZUm9FeG1ROURUQVhZUElSNUZhR2RYMVF2VkQyU3IrOWNZK3Z4eERhRQpoN2h6NFRMR1JvQld0Tk1kMi9OZDBqNWpGZ1o3MmNYRS9yM1FMaE1DZ2dFQUNYMUhKMDBiWjNYWEhzZVJSUGN0Cm8vOE9zRjBKdkJLMnJSRm5DT0RUeVlianRHWUp2a2xIMXRLdllTK3JJd3o3c1pFTmdXbWpJSEhrenpJd3dsc3UKSTNqRENhVVVUNFZaSGhqSExXVzJCV2UvcXFmd0RoZExnaXhBQWw1T2VhSjcyblFkVkxSWTE2UmdWZEJEcnBGaQorSlFoUVRaQ0RCL2lVOVorSHBTTFFpT0FpVVRES3NzbFI2MDRxd1RwU1A1U3laNzhVdGxCb1lZK2tyQVJJNTcwCkFtUXN2WWVYckdVWGpRQWFoWU5QTWNKa1VoOWZyQzBsSVVvdnU5OVpoZzRJaytlUUh0emhxOEVJVm13UnJsOXUKemV0NFUraEhFQTc1cDJ6T0NqdTdPWVZ0WHpLa2FLTzl1SGsxcEVQQ1BsSVYrcXNBcEk3Y0szSnBESlZEbnA0MQpkd0tDQVFCOUhEVk1aZTg5T1AwaVM3VkZmQ0svU01td3l5c1RHZWhmaStCYWJ3ZWdsVmxXWXdEVVdGd2M0NnJyCis0QWJQZGJRakt4VnhmazNIaXdUdmZNVHgvbStwaWpqS0JIL25CTnV3T2VYU1VvTXF0UWxUWGdpT2pibDM2MTEKOVY5ZGRpa0YzU3hMK2ZVTEhIS1pVa3NFczh1Z0J2Z0huN0NNSS9hd2E4eEd1aUNmVmtId24wdm4rMU1GQ2ZENgpYcUlsanptRXNreEdoVXd5VzhVTk1DaG9GdjF0Z3lTS01zZXVKYkRka2t4WUFTVTQzQWJISFR2dkFtWDZTT0UvCnBTd2c1ejdhdFZxbnE0aHJidXJOM2RTSHA3cFkrd1lWQ2ZudHFMakhValkyai9TZVRIT0F2VTFkY0huM05GZHYKSzZJZWFuZGpGOXJhMitWL3JOL05DVU51Q1dKcgotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0t")
    cluster_ca_certificate = base64decode("")
  }
}

module "argo-registration" {
  depends_on = [
    module.cluster
  ]

  count = var.argo_enabled == true ? 1 : 0

  providers = {
    kubernetes = kubernetes,
    argocd     = argocd
  }
  source                       = "app.terraform.io/indico/indico-argo-registration/mod"
  version                      = "1.1.11"
  cluster_name                 = var.label
  region                       = var.region
  argo_password                = var.argo_password
  argo_username                = var.argo_username
  account                      = var.account
  cloud_provider               = "azure"
  argo_github_team_admin_group = var.argo_github_team_owner
  endpoint                     = "https://api.os4-indico-dev-azure.eastus.aroapp.io:6443"
  ca_data                      = base64decode("")
}

provider "local" {}

locals {
  resource_group_name = "${var.label}-${var.region}"
  current_ip          = "${chomp(data.http.workstation-external-ip.response_body)}/20"

  storage_account_name    = replace(lower("${var.account}snapshots"), "-", "")
  argo_app_name           = lower("${var.account}.${var.region}.${var.label}-ipa")
  argo_cluster_name       = "${var.account}.${var.region}.${var.label}"
  argo_smoketest_app_name = lower("${var.account}.${var.region}.${var.label}-smoketest")

  cluster_name = var.label
  base_domain  = lower("${var.account}.${var.domain_suffix}")                            # indico-dev-azure.indico.io
  dns_prefix   = lower("${var.label}.${var.region}")                                     # os1.eastus
  dns_name     = lower("${var.label}.${var.region}.${var.account}.${var.domain_suffix}") # os1.eastus.indico-dev-azure.indico.io
}

resource "tls_private_key" "pk" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "azurerm_resource_group" "cod-cluster" {
  name     = local.resource_group_name
  location = var.region
}

module "networking" {
  depends_on = [
    azurerm_resource_group.cod-cluster
  ]
  source              = "app.terraform.io/indico/indico-azure-openshift-network/mod"
  version             = "1.0.1"
  label               = var.label
  vnet_cidr           = var.vnet_cidr
  subnet_cidrs        = var.subnet_cidrs
  worker_subnet_cidrs = var.worker_subnet_cidrs
  resource_group_name = local.resource_group_name
  region              = var.region
}

module "storage" {
  depends_on = [
    azurerm_resource_group.cod-cluster
  ]
  source              = "app.terraform.io/indico/indico-azure-blob/mod"
  version             = "0.1.7"
  label               = var.label
  region              = var.region
  resource_group_name = local.resource_group_name
}


data "vault_kv_secret_v2" "terraform-redhat" {
  mount = "terraform"
  name  = "redhat"
}

module "cluster" {
  depends_on = [
    module.networking,
    azurerm_resource_group.cod-cluster
  ]
  subscriptionId    = split("/", data.azurerm_subscription.primary.id)[2]
  pull_secret       = jsondecode(data.vault_kv_secret_v2.terraform-redhat.data_json)["openshift-pull-secret"]
  cluster_domain    = lower("${var.label}-${var.account}")
  source            = "./modules/openshift-cluster"
  label             = var.label
  region            = var.region
  svp_client_id     = azuread_service_principal.openshift.application_id
  svp_client_secret = azuread_application_password.application-secret.value
  #default_node_pool       = var.default_node_pool
  #additional_node_pools   = var.additional_node_pools
  master_subnet_id = module.networking.subnet_id
  worker_subnet_id = module.networking.worker_subnet_id
  #k8s_version             = var.k8s_version
  #private_cluster_enabled = var.private_cluster_enabled
  resource_group_name = local.resource_group_name
  #admin_group_name        = var.admin_group_name
  # this feature can be checked using:
  # az feature list -o table --query "[?contains(name, 'Microsoft.ContainerService/EnableWorkloadIdentityPreview')].{Name:name,State:properties.state}"
  # az provider register --namespace Microsoft.ContainerService
  #enable_workload_identity = true # requires: az feature register --namespace "Microsoft.ContainerService" --name "EnableWorkloadIdentityPreview"
  #enable_oidc_issuer       = true
}

resource "local_file" "kubeconfig" {
  depends_on = [
    module.cluster
  ]
  filename = "${path.module}/kubeconfig"
  content  = module.cluster.kube_config_file
}

output "generated-kubeconfig" {
  value = local_file.kubeconfig.content
}
