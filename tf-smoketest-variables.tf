resource "kubernetes_config_map" "terraform-variables" {
  depends_on = [null_resource.sleep-5-minutes]
  metadata {
    name = "terraform-variables"
  }
  data = {
    is_azure = jsonencode({"type": "${bool}", "default": false})
    is_aws = jsonencode({"type": "${bool}", "default": true})
    label = jsonencode({"type": "${string}", "default": "indico", "description": "The unique string to be prepended to resources names"})
    message = jsonencode({"type": "${string}", "default": "Managed by Terraform", "description": "The commit message for updates"})
    applications = jsonencode({"type": "${map(object({'name': '${string}', 'repo': '${string}', 'chart': '${string}', 'version': '${string}', 'values': '${string}', 'namespace': '${string}', 'createNamespace': '${bool}', 'vaultPath': '${string}'}))}", "default": {}})
    region = jsonencode({"type": "${string}", "default": "us-east-1", "description": "The AWS region in which to launch the indico stack"})
    direct_connect = jsonencode({"type": "${bool}", "default": false, "description": "Sets up the direct connect configuration if true; else use public subnets"})
    additional_tags = jsonencode({"type": "${map(string)}", "default": null, "description": "Additonal tags to add to each resource"})
    default_tags = jsonencode({"type": "${map(string)}", "default": null, "description": "Default tags to add to each resource"})
    vpc_cidr = jsonencode({"type": "${string}", "description": "The VPC for the entire indico stack"})
    public_ip = jsonencode({"type": "${bool}", "default": true, "description": "Should the cluster manager have a public IP assigned"})
    vpc_name = jsonencode({"type": "${string}", "default": "indico_vpc", "description": "The VPC name"})
    private_subnet_cidrs = jsonencode({"type": "${list(string)}", "description": "CIDR ranges for the private subnets"})
    public_subnet_cidrs = jsonencode({"type": "${list(string)}", "description": "CIDR ranges for the public subnets"})
    subnet_az_zones = jsonencode({"type": "${list(string)}", "description": "Availability zones for the subnets"})
    storage_gateway_size = jsonencode({"type": "${string}", "default": "m5.xlarge", "description": "The size of the storage gateway VM"})
    existing_kms_key = jsonencode({"type": "${string}", "default": "", "description": "Name of kms key if it exists in the account (eg. 'alias/<name>')"})
    bucket_versioning = jsonencode({"type": "${bool}", "default": true, "description": "Enable bucket object versioning"})
    submission_expiry = jsonencode({"type": "${number}", "description": "The number of days to retain submissions", "default": 30})
    uploads_expiry = jsonencode({"type": "${number}", "description": "The number of days to retain uploads", "default": 30})
    name = jsonencode({"type": "${string}", "default": "indico", "description": "Name to use in all cluster resources names"})
    cluster_name = jsonencode({"type": "${string}", "default": "indico-cluster", "description": "Name of the EKS cluster"})
    k8s_version = jsonencode({"type": "${string}", "default": "1.27", "description": "The EKS version to use"})
    node_groups = jsonencode({})
    node_bootstrap_arguments = jsonencode({"default": "", "description": "Additional arguments when bootstrapping the EKS node."})
    node_user_data = jsonencode({"default": "", "description": "Additional user data used when bootstrapping the EC2 instance."})
    node_disk_size = jsonencode({"default": "150", "description": "The root device size for the worker nodes."})
    cluster_node_policies = jsonencode({"type": "${list(any)}", "default": [], "description": "Additonal IAM policies to add to the cluster IAM role"})
    kms_encrypt_secrets = jsonencode({"type": "${bool}", "default": true, "description": "Encrypt EKS secrets with KMS"})
    enable_readapi = jsonencode({"type": "${bool}", "default": true})
    azure_indico_io_client_id = jsonencode({"type": "${string}"})
    azure_indico_io_client_secret = jsonencode({"type": "${string}"})
    azure_indico_io_subscription_id = jsonencode({"type": "${string}"})
    azure_indico_io_tenant_id = jsonencode({"type": "${string}"})
    eks_cluster_iam_role = jsonencode({"type": "${string}", "default": null, "description": "Name of the IAM role to assign to the EKS cluster; will be created if not supplied"})
    eks_cluster_nodes_iam_role = jsonencode({"type": "${string}", "default": null, "description": "Name of the IAM role to assign to the EKS cluster nodes; will be created if not supplied"})
    storage_capacity = jsonencode({"type": "${number}", "default": 1200, "description": "Storage capacity in GiB for RWX FSx"})
    deletion_protection_enabled = jsonencode({"type": "${bool}", "default": true, "description": "Enable deletion protection if set to true"})
    skip_final_snapshot = jsonencode({"type": "${bool}", "default": false, "description": "Skip taking a final snapshot before deletion; not recommended to enable"})
    per_unit_storage_throughput = jsonencode({"type": "${number}", "default": 100, "description": "Throughput for each 1 TiB or storage (max 200) for RWX FSx"})
    az_count = jsonencode({"type": "${number}", "default": 2, "description": "Number of availability zones for nodes", "validation": [{"condition": "${var.az_count > 0 && var.az_count <= 3}", "error_message": "The az_count must be in the range 1-3"}]})
    snapshot_id = jsonencode({"type": "${string}", "default": "", "description": "The ebs snapshot of read-only data to use"})
    include_rox = jsonencode({"type": "${bool}", "default": false, "description": "Create a read only FSx file system"})
    aws_account = jsonencode({"type": "${string}", "description": "The Name of the AWS Acccount this cluster lives in"})
    argo_host = jsonencode({"type": "${string}", "default": "argo.devops.indico.io"})
    argo_repo = jsonencode({"description": "Argo Github Repository containing the IPA Application"})
    argo_branch = jsonencode({"description": "Branch to use on argo_repo"})
    argo_namespace = jsonencode({"type": "${string}", "default": "argo"})
    argo_path = jsonencode({"description": "Path within the argo_repo containing yaml", "default": "."})
    argo_github_team_owner = jsonencode({"description": "The GitHub Team that has owner-level access to this Argo Project", "type": "${string}", "default": "devops-core-admins"})
    ipa_repo = jsonencode({"type": "${string}", "default": "https://harbor.devops.indico.io/chartrepo/indico-charts"})
    ipa_version = jsonencode({"type": "${string}", "default": "0.12.1"})
    ipa_smoketest_values = jsonencode({"type": "${string}", "default": "Cg=="})
    ipa_smoketest_repo = jsonencode({"type": "${string}", "default": "https://harbor.devops.indico.io/chartrepo/indico-charts"})
    ipa_smoketest_version = jsonencode({"type": "${string}", "default": "0.1.8"})
    ipa_smoketest_enabled = jsonencode({"type": "${bool}", "default": true})
    monitoring_version = jsonencode({"type": "${string}", "default": "0.3.3"})
    ipa_pre_reqs_version = jsonencode({"type": "${string}", "default": "0.4.0"})
    ipa_crds_version = jsonencode({"type": "${string}", "default": "0.2.1"})
    ipa_enabled = jsonencode({"type": "${bool}", "default": true})
    ipa_values = jsonencode({"type": "${string}", "default": ""})
    vault_address = jsonencode({"type": "${string}", "default": "https://vault.devops.indico.io"})
    vault_username = jsonencode({})
    sqs_sns = jsonencode({"type": "${bool}", "default": true, "description": "Flag for enabling SQS/SNS"})
    restore_snapshot_enabled = jsonencode({"default": false, "type": "${bool}", "description": "Flag for restoring cluster from snapshot"})
    restore_snapshot_name = jsonencode({"type": "${string}", "default": "", "description": "Name of snapshot in account's s3 bucket"})
    oidc_enabled = jsonencode({"type": "${bool}", "default": true, "description": "Enable OIDC Auhentication"})
    oidc_client_id = jsonencode({"default": "kube-oidc-proxy"})
    oidc_config_name = jsonencode({"default": "indico-google-ws"})
    oidc_issuer_url = jsonencode({"default": "https://keycloak.devops.indico.io/auth/realms/GoogleAuth"})
    oidc_groups_prefix = jsonencode({"default": "oidcgroup:"})
    oidc_groups_claim = jsonencode({"default": "groups"})
    oidc_username_prefix = jsonencode({"default": "oidcuser:"})
    oidc_username_claim = jsonencode({"default": "sub"})
    monitoring_enabled = jsonencode({"type": "${bool}", "default": true})
    hibernation_enabled = jsonencode({"type": "${bool}", "default": false})
    keda_version = jsonencode({"default": "2.11.2"})
    opentelemetry-collector_version = jsonencode({"default": "0.30.0"})
    include_fsx = jsonencode({"type": "${bool}", "default": false, "description": "Create a fsx file system(s)"})
    include_pgbackup = jsonencode({"type": "${bool}", "default": true, "description": "Create a read only FSx file system"})
    include_efs = jsonencode({"type": "${bool}", "default": true, "description": "Create efs"})
    performance_bucket = jsonencode({"type": "${bool}", "default": false, "description": "Add permission to connect to indico-locust-benchmark-test-results"})
    crds-values-yaml-b64 = jsonencode({"default": "Cg=="})
    pre-reqs-values-yaml-b64 = jsonencode({"default": "Cg=="})
    k8s_dashboard_chart_version = jsonencode({"default": "0.1.0"})
    enable_k8s_dashboard = jsonencode({"type": "${bool}", "default": true})
    use_acm = jsonencode({"type": "${bool}", "default": false, "description": "create cluster that will use acm"})
    terraform_vault_mount_path = jsonencode({"type": "${string}", "default": "terraform"})
    snowflake_region = jsonencode({"default": "us-east-2.aws", "type": "${string}", "description": "region the snowflake instance resides"})
    snowflake_username = jsonencode({"default": "tf-snow", "type": "${string}", "description": "snowflake master username"})
    snowflake_account = jsonencode({"default": "ZL54998", "type": "${string}", "description": "account identifier"})
    snowflake_private_key = jsonencode({"default": null, "type": "${string}", "description": "Private Key for username+private-key snowflake auth"})
    snowflake_db_name = jsonencode({"type": "${string}", "default": "INDICO_DEV", "description": "the db name that snowflake resources will be connected with"})
    enable_weather_station = jsonencode({"type": "${bool}", "default": false, "description": "whether or not to enable the weather station internal metrics collection service"})
    aws_primary_dns_role_arn = jsonencode({"type": "${string}", "default": "", "description": "The AWS arn for the role needed to manage route53 DNS in a different account."})
    is_alternate_account_domain = jsonencode({"type": "${string}", "default": "false", "description": "domain name is controlled by a different aws account"})
    domain_host = jsonencode({"type": "${string}", "default": "", "description": "domain host name."})
    alerting_enabled = jsonencode({"type": "${bool}", "default": false, "description": "enable alerts"})
    alerting_slack_enabled = jsonencode({"type": "${bool}", "default": false, "description": "enable alerts via slack"})
    alerting_pagerduty_enabled = jsonencode({"type": "${bool}", "default": false, "description": "enable alerts via pagerduty"})
    alerting_email_enabled = jsonencode({"type": "${bool}", "default": false, "description": "enable alerts via email"})
    alerting_slack_token = jsonencode({"type": "${string}", "default": "blank", "description": "Secret url with embedded token needed for slack webhook delivery."})
    alerting_slack_channel = jsonencode({"type": "${string}", "default": "blank", "description": "Slack channel for sending notifications from alertmanager."})
    alerting_pagerduty_integration_key = jsonencode({"type": "${string}", "default": "blank", "description": "Secret pagerduty_integration_key."})
    alerting_email_from = jsonencode({"type": "${string}", "default": "blank", "description": "alerting_email_from."})
    alerting_email_to = jsonencode({"type": "${string}", "default": "blank", "description": "alerting_email_to"})
    alerting_email_host = jsonencode({"type": "${string}", "default": "blank", "description": "alerting_email_host"})
    alerting_email_username = jsonencode({"type": "${string}", "default": "blank", "description": "alerting_email_username"})
    alerting_email_password = jsonencode({"type": "${string}", "default": "blank", "description": "alerting_email_password"})
    eks_addon_version_guardduty = jsonencode({"type": "${bool}", "default": true, "description": "enable guardduty"})
    use_static_ssl_certificates = jsonencode({"type": "${bool}", "default": false, "description": "use static ssl certificates for clusters which cannot use certmanager and external dns."})
    ssl_static_secret_name = jsonencode({"type": "${string}", "default": "indico-ssl-static-cert", "description": "secret_name for static ssl certificate"})

  }
}
